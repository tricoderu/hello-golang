# Имя рабочего процесса, которое будет отображаться на вкладке Actions репозитория
name: golang-pipeline
# Указывает, какие события могут вызывать запуск рабочего процесса. Запуск рабочего процесса запускается каждый раз, когда кто-то отправляет изменение в репозиторий или объединяет запрос на извлечение. Это происходит при отправке в любую ветку.
on: push
# Группирует все задания, которые выполняются в рабочем процессе
jobs:
    # Определяет задание
  test:
    # Настраивает задание test для запуска в последней версии Ubuntu Linux runner. Задание будет выполняться на новой виртуальной машине GitHub.
    runs-on: ubuntu-latest
    # Добавляет и запускает Docker-контейнер golang:1.23 для запуска тестов.
    container: golang:1.23
    steps:
        # Это действие проверяет ваш репозиторий, чтобы ваш рабочий процесс мог получить к нему доступ
      - name: Checkout Go
        uses: actions/checkout@v4

      # Команда для запуска тестjd, которые вы написали.
      - name: Run Unit Tests
        run: GOOS=linux GOARCH=amd64 go test

      # Запускает команду go vet, чтобы проверить код на наличие ошибок. 
      - name: Vet
        run: go vet ./...

  deploy:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: test
    # Задание deploy запустится только в случае указания тега для коммита, который вы пушите в GitHub. Чуть ниже будет наглядный пример.
    # Это функция, которая проверяет, начинается ли строка с указанного префикса. Она принимает два аргумента: строку и префикс. Если строка начинается с этого префикса, функция возвращает true, иначе — false.
    # Это контекстная переменная, которая ссылается на полное имя референса, связанную с текущим событием GitHub. Например:
     # для ветки это будет refs/heads/branch-name.
     # для тега это будет refs/tags/tag-name.
    # 'refs/tags' это префикс, который указывает на то, что мы хотим проверить, начинается ли референс с refs/tags. 
    # Это указывает на то, что мы рассматриваем теги в репозитории.
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Действие GitHub для настройки Docker Buildx. Это действие создаст и загрузит конструктор, который можно использовать на следующих этапах вашего рабочего процесса, например, для сборки образа Docker.
      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      #  Действие GitHub для входа в DockerHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      # Действие GitHub для получения метаданных для DockerHub, например тегов или меток. Это нужно для того, чтобы добавить тег к имени образа вашего приложения в DockerHub. 
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ekarpeev/hello-golang

      - name: Build and push Docker Image
        uses: docker/build-push-action@v5
        with:
          # Контекст для сборки образа. В данном случае текущий каталог. 
          context: .
          # Говорит о том, что при успешной сборки образа, нужно будет запушить его в DockerHub.
          push: true
          # Из шага выше, которому присвоен id meta получает тег, чтобы добавить его к имени вашего образа.
          tags: ${{ steps.meta.outputs.tags }}
          # Из шага выше, которому присвоен id meta получает метку, чтобы добавить её к вашему образу. Но у вас меток нет.
          labels: ${{ steps.meta.outputs.labels }} 